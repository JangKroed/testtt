name: Deploy to EB

on:
  push:
      branches: ['main']
  pull_request:
      branches: ['main']

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x, 18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    - name: install dependencies
      run: npm ci
      
    - name: build
      run: npm run build --if-present
      
    - name: run test
      env:
        PORT: 8080
        TEST_HOST: ${{ secrets.TEST_HOST }}
        TEST_NAME: ${{ secrets.TEST_NAME }}
        TEST_USER: ${{ secrets.TEST_USER }}
        TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}
        REDIS_HOST: ${{ secrets.REDIS_HOST }}
        REDIS_USER: ${{ secrets.REDIS_USER }}
        REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}

      run: | 
        echo ${{ secrets.TEST_USER }}
        echo $TEST_NAME
        npm test

  deploy:
    name: CD Pipeline
    runs-on: ubuntu-latest

    strategy:
      matrix:
          node-version: [16.x, 18.x]
  # 위의 buildAndTest가 실행되고 진행된다.
    needs: buildAndTest
    steps:
      - uses: actions/checkout@v3
      # env 파일을 이용할 일이 보통 많은데,
      # Github Secrets를 이용하여 env 파일을 만들고 추가한다.
      # 참고로 ElasticBeanstalk에 Node 관련을 배포할 때는,
      # 8081 포트를 열어줘야 한다!!
      - name: Create env file
        run: |
            touch .env
            echo PORT=8081 >> .env
            echo DEV_HOST=${{ secrets.DEV_HOST }} >> .env
            echo DEV_NAME=${{ secrets.DEV_NAME }} >> .env
            echo DEV_USER=${{ secrets.DEV_USER }} >> .env
            echo DEV_PASSWORD=${{ secrets.DEV_PASSWORD }} >> .env
            echo REDIS_HOST=${{ secrets.REDIS_HOST }} >> .env
            echo REDIS_USER=${{ secrets.REDIS_USER }} >> .env
            echo REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} >> .env
            cat .env
      # Initialize Node.js
      - name: Install Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
            node-version: ${{ matrix.node-version }}
            cache: 'npm'

      # Install project dependencies and build
      - name: Install dependencies
        run: npm install
      # TS 파일들을 빌드해서 build 폴더에 js 파일들을 만들기 때문에
      # 아래에서 zip 파일 구성 시 src 폴더를 제외한 것을 확인할 수 있다.
      - name: Run build
        run: npm run build

      # Install AWS CLI 2
      - name: Install AWS CLI 2
        run: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            which aws
            sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ap-northeast-2

      # Make ZIP file with source code
      # -x는 zip파일 생성 시에 해당 부분들을 제외한다.
      - name: Generate deployment package
        run: zip -r deploy.zip . -x '*.git*' './__test__/*' awscliv2.zip

      - name: Get timestamp
        uses: gerred/actions/current-time@master
        id: current-time

      - name: Run string replace
        uses: frabert/replace-string-action@master
        id: format-time
        with:
          pattern: '[:\.]+'
          string: "${{ steps.current-time.outputs.time }}"
          replace-with: '-'
          flags: 'g'

      # Deploy to Elastic Beanstalk
      # application_name과 environment_name을 꼭 확인하자!
      # 해당 부분은 꼭 같아야 한다!!
      - name: Deploy to EB
        uses: einaregilsson/beanstalk-deploy@v20
        with:
            aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            application_name: great-app
            environment_name: Greatapp-env-1
            region: ap-northeast-2
            version_label: "great-${{ steps.format-time.outputs.replaced }}"
            deployment_package: deploy.zip
            use_existing_version_if_available: true
